            +--------------------+
            | CSCC69             |
            | PROJECT 1: THREADS |
            | DESIGN DOCUMENT    |
            +--------------------+
   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


new struct thread new members

int64_t wake; A thread will unblock when wake ticks have elapsed.
struct list_elem sleepelem; A list element for membership in the list of sleeping threads.

struct semaphore sleepsema; A semaphore used to block a thread that called timer_sleep ().

new static variables in timer.c

static struct list sleep_list; A list of threads that have called timer_sleep().

static struct lock sleep_lock; A lock that ensures only one thread is modifying sleep_list at a time.

static struct semaphore ti_sema; A semaphore that ensures timer interrupt only accesses and/or modifies sleep_list when no other thread is modifying sleep_list.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep (ticks) first adds the parameter ticks to the current tick count. We then set the current threads wake field to this sum. The current thread is inserted into the sleep_list, maintaning an ascending order of wake times. We then call sema down on the sleepsema field of the current thread.
During each timer_interrupt (), we check if the sleep_list is nonempty, and if it is not empty, we compare the current tick with the wake time of the front thread on the list. If the current tick is greater than or equal to the wake field of the thread, we pop the thread off the sleep_list, and call sema_up on the sleepsema of that thread. We continue popping off the front thread and waking it while the list is nonempty and the front element is ready to wake.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We can maintain the list of sleeping threads in ascending order, sorted by the the time that the thread should wake up, so during the timer interrupt handler, the iteration through the sleeping list can terminate as soon as we reach a thread that is not ready to wake, instead of possibly iterating through the entire sleeping list. This also allows removing the sleeping thread from the sleeplist to be quicker because we are popping the first element of a linked list, which can be done in constant time.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Because the sleep_list is a shared data structure, the sleep_list can become corrupted if multiple threads attempt to add to the it at the same time. To prevent this race condition, A lock is added around the list modification in timer_sleep ().

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

A timer interrupt may access and modify the shared sleep_list when another thread is also modifying the sleep_list during a call to timer_sleep (). To avoid this race condition, a semaphore is used to ensure any modification of the sleep_list is complete before the timer_interrupt accesses the sleep_list.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


The sorted_sleep list design was chosen due to its simple, yet effective implementation. Another design that was considered was using a hash table. The hash table would have wake up times as keys and threads/lists of threads as elements. The hash table would allow quick and easy checks at each interrupt to determine if there is a thread that needs to be unblocked, We would just hash the tick at which the interrupt occured. It also allows simple insertion into the sleep table because there is no need for sorting the entries. While the hash table would be fast, it is more complicated and less memory efficient. The hash table data structure is more difficult to understand than a list, therefore implementation and debugging would have taken longer. Hash tables are also less memory efficient than lists (unused buckets and lists within buckets) due to their higher complexity. The trade off between performance and complexity was not worth it, so I chose the sorted sleep_list. The time it takes to check if a thread needs to be unblocked is still constant time, and although insertion into the sleep list has a O(n) time complexity for the average case, but in practice, it is rare sleeping grow to a size where this makes a significant impact on performance.

             PRIORITY SCHEDULING
             ===================


---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

members added to struct thread

struct list *waiters; Pointer to waiters list that this thread may be a part of, in case we need to sort it again due to priority donation.

struct thread *donor; Points to a thread that donated its priority to this thread.

struct list locks; List of locks that are owned by this thead.

member added to struct lock

struct lock elem; An element of a list of locks that a thread owns.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

The data structure is a singly linked list, where a thread that receives a donation points to the thread that is donating its priority, so that way the thread can access the priority field of the donor thread. The list is NULL terminated, so a list in a nested donation has a clear end.

            
                  donor              donor              donor
        NULL <-------Thread C <-------- thread B <--------thread A
is not receiving priority donation      C donates to B     B donates to A

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

The synchronization constructs will keep the list of waiters sorted by priority, so when it is time to unblock a thread, it can simply pop off the highest priority thread in the waiters list, which will be at the end of the list.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

If thread A has a lock, then Thread B calls lock_acquire(&lock) on the same lock, we access the holder field of the lock, then set the donor field of holder to thread B, the current thread. The function for accessing priority follows the donor pointers of a thread until it reaches a null pointer so it may be possible that we need to resort the waiters list of the resource that the holder is a part of. Thread B calls sema_down in lock_acquire(), it will be inserted into the waiters list mainting a sorted priority ordering.

Nested donation is handled with the donor pointer structure of the priority donation. If thread B had a lock and Thread C called lock_acquire on that lock, it would make thread B point to thread C, that way when call get_priority_thread (A), it follows the pointers to C, then returns C's priority.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

lock_release first sets the donor pointer of the current thread to NULL and removes the lock from the list of locks that the current thread held.
If the current thread has any other locks, it sets the donor pointer of the current thread to the thread with highest priority in the waiters lists of the list of locks. The current thread then calls sema up, which will wake up the higher priority thread that was waiting on the lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

If the current thread is changing its priority in thread_set_priority to a lower priority, then it may be the running even when there are other ready threads with a higher priority. I fix this by calling thread yield right after the priority change. This cannot be avoided with a lock.

If I had changed the priority members in my implementation of priority donation instead of using pointers to donators, thread set priority may have caused more issues because it could cause sorted lists of priority to become out of order.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

I chose pointers from a receiving thread to the donating thread because it was very light. I also considered having a list of pointers because a thread can receive multiple donations at once if it is holding multiple locks, but this would increase the complexity of getting a threads priority because it would end up searching a tree with any width instead of following a singly linked list. It is also easier to remove a donation with the donor pointer instead of a list.


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
