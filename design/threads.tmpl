            +--------------------+
            | CSCC69             |
            | PROJECT 1: THREADS |
            | DESIGN DOCUMENT    |
            +--------------------+
   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread.h - struct thread - int64_t wake; A thread will unblock when wake ticks have elapsed.
thread.h - struct thread - struct list_elem sleepelem; A list element for memmbership in the list of sleeping threads.
thead.h - struct thread - struct semaphore sleepsema; A semaphore used to block a thread that called timer_sleep ().
timer.c - static struct list sleep_list; A list of threads that have called timer_sleep ().
timer.c - static struct lock sleep_lock; A lock that ensures only one thread is modifying sleep_list at a time
timer.c - static struct semaphore ti_sema; A semaphore that ensures timer interrupt only accesses and/or modifies sleep_list when no other thread is modifying sleep_list.




struct thread: added 

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

currently, timer sleep busy waits: calling thread_yield () until in a loop until enough time has elapsed to break the loop. A possible solution for the timer without busy waiting is as follows: the starting tick is int64_t start = timer_ticks ();
when we record this, we block this thread, then record the amount of time it should be blocked by adding a field in struct thread called timerending that represents the tick number in which we should unblock this thread we can check when to unblock a thread by looping through a list of sleeping threads (create a static list of sleeping threads in thread.c) each time we enter schedule -do not do it in schedule, we should do it in thread_tick() or timer_interrupt, we iterate through this list and unblock any thread that has slept for long enough, we should use semaphores for this.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We can maintain the list of sleeping threads in ascending order, sorted by the the time that the thread should wake up, so during the timer interrupt handler, the iteration through the sleeping list can terminate as soon as we reach a thread that is not ready to wake, instead of possibly iterating through the entire sleeping list. This also allows removing the sleeping thread from the sleeplist to be quicker because we are popping the first element of a linked list, which can be done in constant time.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Because the sleep_list is a shared data structure, the sleep_list can become corrupted if multiple threads attempt to add to the it at the same time. To prevent this race condition, A lock is added around the list modification in timer_sleep ()

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

A timer interrupt may access and modify the shared sleep_list when another thread is also modifying the sleep_list. To avoid this race condition, a semaphore is used to ensure any modification of the sleep_list is complete before the timer_interrupt accesses the sleep_list.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

             PRIORITY SCHEDULING
             ===================

    The sorted_sleep list design was chosen due to its simple, yet effective implementation. Another design that was considered was using a hash table. The hash table would have wake up times as keys and threads/lists of threads as elements. The hash table would allow quick and easy checks at each interrupt to determine if there is a thread that needs to be unblocked, We would just hash the tick at which the interrupt occured. It also allows simple insertion because there is no need for sorting the entries. While the hash table would be fast, it is more complicated and less memory efficient. The hash table data structure is more difficult to understand than a list, therefore implementation and debugging would have taken longer. Hash tables are also less memory efficient than lists (unused buckets and lists within buckets) due to their higher complexity. The trade off between performance and complexity was not worth it, so I chose the sorted sleep_list. The time it takes to check if a thread needs to be unblocked is constant time, and although insertion into the sleep list may take longer as it is O(n) with the size of the list, a binary search implementation can improve insertion to O(log n).

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
